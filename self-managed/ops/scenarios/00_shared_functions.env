#!/usr/bin/env bash

# ++-----------
# ||   00 - Global Functions
# ++------

# ++-----------------+
# || Variables       |
# ++-----------------+

## [core] [conf] Log Levels
## 0 - TRACE & Commands
## 1 - DEBUG
## 2 - INFO
## 3 - WARN
## 4 - ERR
LOG_LEVEL=${LOG_LEVEL:-2}

## Timestamp
TSTAMP_MARKER="/tmp/tstamp.$$"
touch -t `date '+%Y%m%d%H%M.%S'` ${TSTAMP_MARKER}

## Header Counters
## Resets header counter at the start of execution.
H1=0
H2=0
H3=0

# ++-----------------+
# || Functions       |
# ++-----------------+

# ++---------------------------------------------------------------------------+
# || Logging                                                                   |
# ++---------------------------------------------------------------------------+

## Prints a line on stdout prepended with date and time
log() {
  echo -e "\033[1m["$(date +"%Y-%m-%d %H:%M:%S")"] - ${@}\033[0m"
}

log_err() {
  DEC_ERR="\033[1m\033[31m[ERROR] \033[0m\033[1m"
  log "${DEC_ERR}${@}"  
}

log_warn() {
  DEC_WARN="\033[1m\033[33m[WARN] \033[0m\033[1m"
  log "${DEC_WARN}${@}"  
}

log_ok() {
  DEC_OK="\033[1m\033[32m[ OK ] \033[0m\033[1m"
  log "${DEC_OK}${@}"  
}

## Prints a header on stdout
header() {
  COL="\033[1m\033[32m"

  echo -e ""
  echo -e "${COL}++----------- " 
  echo -e "${COL}||   ${@} "
  echo -e "${COL}++------      " 

  echo -e "\033[0m"
}

header1() {
  H1=$((H1+1))
  H2=0
  H3=0
  header "$H1 - $@"

  log_provision "# $H1 - ${@}"
}

header2() {
  H2=$((H2+1))
  H3=0

  COL="\033[1m\033[32m"

  echo -e "${COL}"
  echo -e "${COL} ##   $H1.$H2 - ${@} "
  echo -e "\033[0m"

  log_provision "## $H1.$H2 - ${@}"

}

header3() {

  H3=$((H3+1))

  COL="\033[1m\033[32m"

  echo -e "${COL}"
  echo -e "${COL} ###   $H1.$H2.$H3 - ${@} "
  echo -e "\033[0m"

  log_provision "### $H1.$H2.$H3 - ${@}"

}

## [feat] [log] Make script log on files
## todo add this at the end of every log function
log_provision() {

  ## [debug] make sure logging to files is fully implemented
  return 0

  if [ ! -z "${LOG_PROVISION}" ]; then
    touch ${LOG_PROVISION}
    echo -e "${@}" >> ${LOG_PROVISION}
  fi

}

## [feat] [log] Run this function at the end of every module to get a log of generated files
## [ ] [log] [ref] Check sript for correctness
## [ ] [log] Add script in flow
get_created_files() {

  echo "------------------------------------------------"  >> ${LOG_FILES_CREATED}
  echo " Module $H1 - Files Created"                       >> ${LOG_FILES_CREATED}
  echo "-----------------------------------------------"   >> ${LOG_FILES_CREATED}
  echo ""                                                  >> ${LOG_FILES_CREATED}

  find ${ASSETS} -type f -newer ${TSTAMP_MARKER} | sort >> ${LOG_FILES_CREATED}

  echo ""                                                  >> ${LOG_FILES_CREATED}

  if [[ ! -z "$1" ]] && [[ "$1" == "--verbose" ]] ; then

    echo -e "\033[1m\033[31mFILES CREATED IN THIS MODULE:\033[0m"
    find ${ASSETS} -type f -newer ${TSTAMP_MARKER} | sort
    echo ""

  fi

  touch -t `date '+%Y%m%d%H%M.%S'` ${TSTAMP_MARKER}

  sleep 1

}

# ++---------------------------------------------------------------------------+
# || OS Management && Flow Control                                             |
# ++---------------------------------------------------------------------------+

## Check if the binary exists otherwise exits
prerequisite_check() {
  if [ ! -z "$1" ] ; then
    if [[ `which $1` ]] ; then
      log "[ $1 ] - found"
      return
    fi
  fi
  log_err "[ $1 ] - Not found"
  exit 1
}

## Check if OS is Linux based or not
is_linux() {

  if [[ "$OSTYPE" == "linux-gnu"* ]]; then
    echo true
  else
    echo false
  fi

}

# Waits for a node with hostname passed as an argument to be resolvable
wait_for() {

  _HOSTNAME=$1

  _NODE_IP=`dig +short $1`

  while [ -z ${_NODE_IP} ]; do

    log_warn "$1 not running yet"

    sleep 1

    _NODE_IP=`dig +short $1`
  
  done

}

# Executes a command on a remote host
# Usage 
# remote_exec hashicups-db "bash -c /start_database.sh"
remote_exec() {
  REMOTE_HOST="$1"
  COMMAND="$2"

  ssh \
    ${SSH_OPTS} \
    -i ${SSH_CERT} \
    ${USER}@${REMOTE_HOST}${FQDN_SUFFIX} \
    "${COMMAND}"
}

# Copies a file on a remote node
# Usage:
# remote_copy hashicups-db agent-gossip-encryption.hcl /etc/consul/config
remote_copy() {
  # scp -o ${SSH_OPTS} agent-gossip-encryption.hcl                 consul${FQDN_SUFFIX}:/etc/consul/config > /dev/null 2>&1
  REMOTE_HOST="$1"
  SOURCE="$2"
  DESTINATION="$3"

  if scp -r ${SSH_OPTS} -i ${SSH_CERT} ${SOURCE} ${USER}@${REMOTE_HOST}${FQDN_SUFFIX}:${DESTINATION} > /dev/null 2>&1; then
    log "Copied ${SOURCE} to ${USER}@${REMOTE_HOST}${FQDN_SUFFIX}:${DESTINATION}"
  else
    log_err "[ @${FUNCNAME[0]} ] Copy of ${SOURCE} to ${REMOTE_HOST} failed."
    log_err "[ @${FUNCNAME[0]} ] Check if Host:[${REMOTE_HOST}] is running, or if ${SOURCE} exists."
    exit 255
  fi
}

## Locates a supporting script in the supporting script library and runs it
execute_supporting_script() {

  _support_scripts_name="$1" #"generate_consul_server_tokens.sh"

  ## This is:
  ## ops/scenarios when running remotely 
  ## scenarios/ when running locally (on bastion host)
  ## [warn] Possible breaking point
  ## [ ] find a more elegant way to check this  
  if [ -d "ops/scenarios/99_supporting_scripts/" ]; then
    _support_scripts_path="ops/scenarios/99_supporting_scripts/"
  elif [ -d "scenarios/99_supporting_scripts/" ]; then
    _support_scripts_path="scenarios/99_supporting_scripts/"
  else
    log_err "[ ${OPERATE_STEP} ] Supporting scripts folder NOT FOUND...exiting"
    exit 1
  fi

  _support_script_source="${_support_scripts_path}${_support_scripts_name}"

  if [ -f "${_support_script_source}" ]; then
  #   log "Found ${_support_scripts_name} - Copying it to scenario files."

    ## Copy script to scenario folder to keep track of usage
    cp "${_support_script_source}" "${ASSETS}scenario/scripts/${_support_scripts_name}"

  #   log "Running support script"
    chmod +x "${ASSETS}scenario/scripts/${_support_scripts_name}"
    ${ASSETS}scenario/scripts/${_support_scripts_name}

    STAT=$?

    ## Checking exit status
    if [ ${STAT} -ne 0 ];  then
      log_err "Error creating configuration. Exiting."
      exit 1;
    fi

  else
    log_err "[ ${OPERATE_STEP} ] ${_support_scripts_name} - NOT FOUND...exiting"
    exit 1
  fi
}


